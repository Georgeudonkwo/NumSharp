<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NumSharp</name>
    </assembly>
    <members>
        <member name="T:NumSharp.TrustregionMethod">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.TrustregionMethod.Hook">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.TrustregionMethod.DogLeg">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.BMath">
            <summary>
            Basic utility mathematical routines
            </summary>
        </member>
        <member name="M:NumSharp.BMath.Diff(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            first order central difference routine for differentiating univariate function <paramref name="fun"/>
            </summary>
            <param name="fun"></param>
            <param name="x"></param>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.BMath.Diff2(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            second order finite difference routine
            </summary>
            <param name="fun"></param>
            <param name="x"></param>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.BMath.Jacobian(System.Func{NumSharp.Vector,NumSharp.Vector},NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="x"></param>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.BMath.Grad(System.Func{NumSharp.Vector,System.Double},NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="x"></param>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.BMath.Hessian(System.Func{NumSharp.Vector,System.Double},NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="x"></param>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.BMath.TrustRegionDriver(System.Func{NumSharp.Vector,System.Double},NumSharp.Vector,NumSharp.Vector,NumSharp.Vector,NumSharp.Matrix,System.Double@,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="Sn"></param>
            <param name="g"></param>
            <param name="X"></param>
            <param name="H"></param>
            <param name="Trradius"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.BMath.LinSpace(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="UpperLimit"></param>
            <param name="LowerLimit"></param>
            <param name="NumberOfIntervals"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.BMath.LogSpace(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="UpperLimit"></param>
            <param name="LowerLimit"></param>
            <param name="NumberOfIntervals"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.LMUpdateStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.LMUpdateStrategy.LM">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.LMUpdateStrategy.Quadratic">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.LMUpdateStrategy.Nielsen">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.LMUpdateStrategy.TrustRegion">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.CurveFitting">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.CurveFitting.PolyFit(NumSharp.Vector,NumSharp.Vector,System.Int32,NumSharp.QRFactorizationMethod)">
            <summary>
            No Normal Equation is formed, instead the algorithm performs QR decomposition of the Vandermonde matrix using the Householder method as default. 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="degree"></param>
            <param name="qrsch"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.PolyFit(NumSharp.Vector,NumSharp.Vector,System.Int32,System.Int32[],System.Collections.Generic.List{System.Func{NumSharp.Vector}})">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="degree"></param>
            <param name="colToModify"></param>
            <param name="ModificationCallBack"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.PolyFit2(NumSharp.Vector,NumSharp.Vector,System.Int32)">
            <summary>
            This version generates the normal matrix from the vondermonde matrix and set up the normal equation.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.ErrorAnalysis(NumSharp.Vector,NumSharp.Vector,NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="ypred"></param>
            <param name="coeffs"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.RationalFit(NumSharp.Vector,NumSharp.Vector,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="numDegree"></param>
            <param name="denomDegree"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.CurveFitting.ExponetialFit(NumSharp.Vector,NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="EstP"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.PowerFit(NumSharp.Vector,NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="EstP"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.MultiLinearRegression(System.Collections.Generic.List{NumSharp.Vector},NumSharp.Vector,System.Collections.Generic.List{NumSharp.Vector},System.Boolean)">
            <summary>
            
            </summary>
            <param name="IndependentVariables"></param>
            <param name="dependenrVariable"></param>
            <param name="EstPoint"></param>
            <param name="includeProductterm"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.QuadraticBivariateFit(NumSharp.Matrix,NumSharp.Matrix,NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="xlist"></param>
            <param name="yMat"></param>
            <param name="FirstIndepVar"></param>
            <param name="secondIndVar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.GaussNewton(System.Func{NumSharp.Vector,NumSharp.Vector},NumSharp.Vector,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            Buggy do not use
            </summary>
            <param name="fun"></param>
            <param name="InitialGuess"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.LevenbergMarquart(System.Func{NumSharp.Vector,NumSharp.Vector},NumSharp.Vector,NumSharp.Vector,NumSharp.LMSetting)">
            <summary>
            buggy do not use
            </summary>
            <param name="ypredicted"></param>
            <param name="ymeasured"></param>
            <param name="P0"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.CurveFitting.LevenbergMarquartTR(System.Func{NumSharp.Vector,NumSharp.Vector},NumSharp.Vector,NumSharp.Vector,NumSharp.LMSetting)">
            <summary>
            
            </summary>
            <param name="ypredicted"></param>
            <param name="ymeasured"></param>
            <param name="P0"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.CurveFitResults">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.CurveFitResults.StandardError">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.CurveFitResults.Correlation">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.CurveFitResults.CoefficientOfDetermination">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.CurveFitResults.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.CurveFitResults.PredictedValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.LMSetting">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.Dampingfactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.Trustregion">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.GradTol">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.ParameterTol">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.CostTol">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.StepAcceptanceTol">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.LMUpdateMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.LamdaDownFac">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.LamdaUpFac">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.Nu">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.Ubound">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.Lbound">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.MaxIter">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.Weight">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.ApplyGeodesicAcceleration">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.ApplyParameterBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.AllowUphillSteps">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.GeodesicFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.SecondOrderDirectionDerivativeDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.RankOneUpdateSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMSetting.DecayRate">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.LMResults">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.OptimumParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.CorrelationMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.StandardParameterError">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.StandardErrorOfFit">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.Jacobian">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.Gradient">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.PercentParameterFit">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.ConvergenceAchieved">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.NumberOfIteration">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.Info">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.ReducedErrorCritirion">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.Costs">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.LMResults.ContourData">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.EigenSystem">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.EigenSystem.PowerMethod(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.EigenSystem.InversePowerMethod(NumSharp.Matrix,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="shift"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.EigenSystem.InversePowerMethod(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.EigenSystem.EigenPair(NumSharp.Matrix,NumSharp.QRFactorizationMethod,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="qrScheme"></param>
            <param name="tol"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.OrthogonalPolynomial">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.OrthogonalPolynomial.Legendre">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.OrthogonalPolynomial.Laguerre">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.OrthogonalPolynomial.Hermite">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.OrthogonalPolynomial.Chebyshev">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.Integration">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Integration.RombergIntegration(System.Func{System.Double,System.Double},System.ValueTuple{System.Double,System.Double},System.Int32)">
            <summary>
            
            </summary>
            <param name="F"></param>
            <param name="Limits"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Integration.AdaptiveSimpson(System.Func{System.Double,System.Double},System.ValueTuple{System.Double,System.Double},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="F"></param>
            <param name="Limits"></param>
            <param name="level"></param>
            <param name="maxlevel"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Integration.GaussQuadrature(System.Func{System.Double,System.Double},System.ValueTuple{System.Double,System.Double},NumSharp.OrthogonalPolynomial)">
            <summary>
            
            </summary>
            <param name="Fun"></param>
            <param name="Limits"></param>
            <param name="QuadratureType"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Integration.MultipleIntegral(System.Func{System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double},System.ValueTuple{System.Double,System.Double},System.Double,System.Double,NumSharp.OrthogonalPolynomial)">
            <summary>
            
            </summary>
            <param name="Fun"></param>
            <param name="L1"></param>
            <param name="L2"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="QuadratureType"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.Interpolation">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Interpolation.NewtonMatrix(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.NewtonInterpolation3(NumSharp.Vector,NumSharp.Vector,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="xval"></param>
            <param name="yval"></param>
            <param name="p"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.NewtonDividedDiffernce(NumSharp.Vector,NumSharp.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="order"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Interpolation.NewtonDividedDiffernce(NumSharp.Vector,System.Func{System.Double,System.Double},System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="yFunc"></param>
            <param name="order"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Interpolation.NewtonInterpolation(NumSharp.Vector,NumSharp.Vector,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="xval"></param>
            <param name="yval"></param>
            <param name="p"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.InterpolationInterval(NumSharp.Vector,NumSharp.Vector,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="xval"></param>
            <param name="yval"></param>
            <param name="p"></param>
            <param name="order"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Interpolation.NewtonInterpolation(NumSharp.Vector,System.Func{System.Double,System.Double},System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="xval"></param>
            <param name="yFunc"></param>
            <param name="p"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.NewtonInterpolation2(NumSharp.Vector,NumSharp.Vector,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="xval"></param>
            <param name="yval"></param>
            <param name="p"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.BaryCentricInterp(NumSharp.Vector,NumSharp.Vector,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="xval"></param>
            <param name="yval"></param>
            <param name="P"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.LangrageInterpolation(NumSharp.Vector,NumSharp.Vector,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="xval"></param>
            <param name="yval"></param>
            <param name="p"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.BivariateInterpolation(NumSharp.Vector,NumSharp.Vector,NumSharp.Vector,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="fval"></param>
            <param name="xpoint"></param>
            <param name="ypoint"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.BivariateInterpolation(NumSharp.Vector,NumSharp.Vector,NumSharp.Matrix,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="DependentVariable"></param>
            <param name="xpoint"></param>
            <param name="ypoint"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.BivariateInterpolation2(NumSharp.Vector,NumSharp.Vector,NumSharp.Matrix,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="DependentVariable"></param>
            <param name="xpoint"></param>
            <param name="ypoint"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.ChebyshevNodes(System.Int32)">
            <summary>
            
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.AitkenInterpolation(NumSharp.Vector,NumSharp.Vector,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="xval"></param>
            <param name="yval"></param>
            <param name="p"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.NevilleInterpolation(NumSharp.Vector,NumSharp.Vector,System.Double,System.Int32)">
            <summary>
            buugy do not use
            </summary>
            <param name="xval"></param>
            <param name="yval"></param>
            <param name="p"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.InverseInterpolation(NumSharp.Vector,NumSharp.Vector,System.Double,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="yval"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.HermiteCoefficients(NumSharp.Vector,NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dydx"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Interpolation.HermiteInterpolation(NumSharp.Vector,NumSharp.Vector,NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dydx"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.ISpdModification">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.ISpdModification.SPD(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="Nspd"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.SwapState">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.SwapState.RowWise">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.SwapState.ColumnWise">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.SwapState.BothRowAndColumnWise">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.Matrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NumSharp.Matrix.#ctor(NumSharp.Matrix)">
            <summary>
            copy constructor
            </summary>
            <param name="A"></param>
        </member>
        <member name="M:NumSharp.Matrix.#ctor(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Matrix.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})">
            <summary>
            
            </summary>
            <param name="ListArray"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Matrix.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.String)">
            <summary>
            
            </summary>
            <param name="ListArray"></param>
            <param name="Orientation"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Matrix.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="scaler"></param>
        </member>
        <member name="M:NumSharp.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="M:NumSharp.Matrix.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Matrix.#ctor(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_Implicit(System.Double[0:,0:])~NumSharp.Matrix">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_Implicit(NumSharp.Matrix)~System.Data.DataTable">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_Implicit(System.Data.DataTable)~NumSharp.Matrix">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_Implicit(NumSharp.Matrix)~System.Double[0:,0:]">
            <summary>
            
            </summary>
            <param name="MatObj"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_Implicit(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})~NumSharp.Matrix">
            <summary>
            
            </summary>
            <param name="ListArr"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_Explicit(NumSharp.Matrix)~System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}">
            <summary>
            
            </summary>
            <param name="matObj"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_Implicit(NumSharp.Vector)~NumSharp.Matrix">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_Explicit(NumSharp.Matrix)~NumSharp.Vector">
            <summary>
            
            </summary>
            <param name="A"></param>
        </member>
        <member name="M:NumSharp.Matrix.op_ExclusiveOr(NumSharp.Matrix,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="exponent"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_OnesComplement(NumSharp.Matrix)">
            <summary>
            Matrix Transpose 
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_Multiply(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_Multiply(System.Double,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="Scaler"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_Multiply(NumSharp.Matrix,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_Addition(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_Subtraction(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_UnaryNegation(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_Division(NumSharp.Matrix,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="scaler"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_Equality(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.op_Inequality(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Matrix.Item(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Matrix.Item(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Get a column or row vector 
            </summary>
            <param name="col_Row_Index"></param>
            <param name="startP">The starting index of the respective column or row</param>
            <param name="endp"> The ending index of the respective column or row</param>
            <param name="VectorType"> the orientation; column or row wise</param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Modify(System.Int32[],System.Collections.Generic.List{System.Func{NumSharp.Vector}})">
            <summary>
            
            </summary>
            <param name="colOrRowsToModify"></param>
            <param name="funs"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Modify(System.Int32,System.Func{NumSharp.Vector})">
            <summary>
            modify the mattrix using the transform function
            </summary>
            <param name="colOrRowToModify">the column or row to modify</param>
            <param name="fun">the modifying function</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Power(System.Double)">
            <summary>
            
            </summary>
            <param name="exponent"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Power(NumSharp.Matrix,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="exponent"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Select``1(System.Func{NumSharp.Vector,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Apend(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.PrePend(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Add(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="V"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Matrix.Normalized">
            <summary>
            normalizes each column of the matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.swap(System.Int32,System.Int32,NumSharp.SwapState)">
            <summary>
            
            </summary>
            <param name="swapfrom"></param>
            <param name="swapTo"></param>
            <param name="SwapMode"></param>
        </member>
        <member name="M:NumSharp.Matrix.MaxValIndex(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="colv"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.MaxOffDiagonalElement">
            <summary>
            Get the maximum off diagonal element
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Transpose(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Trace(NumSharp.Matrix)">
            <summary>
            calculate the trace of the matrix
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Det">
            <summary>
            calculate determinant
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Det(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Inverse(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.iSLowerTriangular">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.iSUpperTriangular">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Condest">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Condest2">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Cond">
            <summary>
            return the condition number of the matrix
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Matrix.Rank">
            <summary>
            return the rank of the matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Remove(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Remove(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="ColOrRowIndex"></param>
            <param name="vectorType"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.isillConditioned">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.IsSymmetric(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.IsDiagonal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.IsDiagonallyDominant">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.SubMatrix(NumSharp.Matrix,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="Startcol"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.SubMatrix(NumSharp.Matrix,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="startRow"></param>
            <param name="Startcol"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.SubMatrix(NumSharp.Matrix,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="startRow"></param>
            <param name="Startcol"></param>
            <param name="endrow"></param>
            <param name="endcol"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.InsertVectorColumnwise(NumSharp.Matrix,NumSharp.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="V"></param>
            <param name="colindex"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Matrix.InsertVectorRowwise(NumSharp.Matrix,NumSharp.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="V"></param>
            <param name="rowindec"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Matrix.InsertVectorColumnwise(NumSharp.Matrix,NumSharp.Vector,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="V"></param>
            <param name="colindex"></param>
            <param name="startIndex"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Matrix.InsertVectorRowwise(NumSharp.Matrix,NumSharp.Vector,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="V"></param>
            <param name="rowindec"></param>
            <param name="startIndex"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Matrix.ExtractColumnVector(NumSharp.Matrix,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.TwPow(NumSharp.Matrix,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="exponent"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Matrix.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.MatrixVectorMult(NumSharp.Matrix,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.MatrixVectorMult(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.OuterProduct(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            Calculates the outer product of two vectors
            </summary>
            <param name="V1"> A column Vector</param>
            <param name="V2"> A row vector</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.FlipLR">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.FlipUD">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.KroneckerProduct(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            return the kronecker matrix
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.InsectSubMatrix(NumSharp.Matrix,NumSharp.Matrix,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="S"></param>
            <param name="StartRowIndex"></param>
            <param name="startColIndex"></param>
        </member>
        <member name="M:NumSharp.Matrix.HadamardProduct(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            termwise or Schur product of two matrices
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Matrix.MatrixMult(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Matrix.TwDiv(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Matrix.MatrixMult(NumSharp.Matrix[])">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.IsPositiveDefinite">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.ScalarMatrixMult(System.Double,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.ScalarMatrixDiv(System.Double,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.MatrixAddition(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:NumSharp.Matrix.MatrixAddition(NumSharp.Matrix[])">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.MatrixSubtraction(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:NumSharp.Matrix.MatrixSubtraction(NumSharp.Matrix[])">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.MatrixScalerDivision(NumSharp.Matrix,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="scaler"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.SwapRowVectors(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="PivotRowIndex"></param>
            <param name="maxValIndex"></param>
        </member>
        <member name="M:NumSharp.Matrix.MaxElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.HouseHolder(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.GivensMatrix(NumSharp.Matrix,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Gmat"></param>
            <param name="PivotIndex"></param>
            <param name="EliminationIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.MatrixNorm_1(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.MatrixNorm_Infinity(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.FrobeniusNorm(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.GetDiagonalElements(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.GetDiagonalElements">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.IdentityMatrix(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.IdentityMatrix(System.Int32)">
            <summary>
            
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Zeros(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Diagonal(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="dim"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Diagonal(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Diagonal(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.vec(NumSharp.Matrix,System.String)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="rowOrcol"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.VandermondeMatrix(NumSharp.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="Xval"></param>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.VandermondeMatrix(System.Collections.Generic.List{NumSharp.Vector},System.Boolean)">
            <summary>
            
            </summary>
            <param name="XList"></param>
            <param name="includeProductterm"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Hilb(System.Double)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Hessenberg(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Matrix.Nrow">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.Matrix.Ncol">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.Matrix.Orientation">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Matrix.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Clone">
            <summary>
            perform a shllow copy of the matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Equals(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Matrix.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NumSharp.QRFactorizationMethod">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.QRFactorizationMethod.MGS">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.QRFactorizationMethod.HouseHolder">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.QRFactorizationMethod.Givens">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.MatrixFactorization">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.MatrixFactorization.pivoting(NumSharp.Matrix,NumSharp.Matrix,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="PermMatrix"></param>
            <param name="colIndex"></param>
        </member>
        <member name="M:NumSharp.MatrixFactorization.pivoting(NumSharp.Matrix,NumSharp.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <param name="colIndex"></param>
        </member>
        <member name="M:NumSharp.MatrixFactorization.Elimination(NumSharp.Matrix,NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="P"></param>
        </member>
        <member name="M:NumSharp.MatrixFactorization.LUP(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.MatrixFactorization.TriDiagonalLU(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.MatrixFactorization.Cholesky(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.MatrixFactorization.LDM(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.MatrixFactorization.LDLt(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.MatrixFactorization.ModifiedCholeskyDecomp(NumSharp.Matrix,System.Boolean)">
            <summary>
            Implements the GMW Algorithm
            </summary>
            <param name="A"></param>
            <param name="ApplyPivot"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.MatrixFactorization.HouseHolderQR(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.MatrixFactorization.QR(NumSharp.Matrix,NumSharp.QRFactorizationMethod)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="Qrscheme"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.MatrixFactorization.SVD(NumSharp.Matrix,NumSharp.QRFactorizationMethod)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="qrSch"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.MatrixFactorization.SpectralDecomposition(NumSharp.Matrix,NumSharp.QRFactorizationMethod)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="qrscheme"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="F:NumSharp.MatrixFactorization.NumberOfRowInterChangeDuringLU">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.ModifiedCholeskyGMWalg">
            <summary>
            Uses the Gill Murray Wright algorithm
            </summary>
        </member>
        <member name="M:NumSharp.ModifiedCholeskyGMWalg.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="applyPivoting"></param>
        </member>
        <member name="M:NumSharp.ModifiedCholeskyGMWalg.SPD(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="Nspd"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.ODE.IntegrandModel">
            <summary>
            
            </summary>
            <param name="IndpVar"></param>
            <param name="DepVar"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.ODE.SingleSteps">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.ODE.SingleSteps.Euler(NumSharp.ODE.IntegrandModel,NumSharp.Vector,System.ValueTuple{System.Double,System.Double,System.Int32})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="InitialVal"></param>
            <param name="Mesh"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.ODE.SingleSteps.RK4(NumSharp.ODE.IntegrandModel,NumSharp.Vector,System.ValueTuple{System.Double,System.Double,System.Int32})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="InitialVal"></param>
            <param name="Mesh"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.ODE.SingleSteps.RK2ModifiedEuler(NumSharp.ODE.IntegrandModel,NumSharp.Vector,System.ValueTuple{System.Double,System.Double,System.Int32})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="InitialVal"></param>
            <param name="Mesh"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.ODE.SingleSteps.RK2Ralston(NumSharp.ODE.IntegrandModel,NumSharp.Vector,System.ValueTuple{System.Double,System.Double,System.Int32})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="InitialVal"></param>
            <param name="Mesh"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.ODE.SingleSteps.RKHeun(NumSharp.ODE.IntegrandModel,NumSharp.Vector,System.ValueTuple{System.Double,System.Double,System.Int32})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="InitialVal"></param>
            <param name="Mesh"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.ODE.SingleSteps.RK3(NumSharp.ODE.IntegrandModel,NumSharp.Vector,System.ValueTuple{System.Double,System.Double,System.Int32})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="InitialVal"></param>
            <param name="Mesh"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.ODE.SingleSteps.RK45(NumSharp.ODE.IntegrandModel,NumSharp.Vector,System.ValueTuple{System.Double,System.Double,System.Int32},System.Double,System.Double,System.Double)">
            <summary>
            not working
            </summary>
            <param name="model"></param>
            <param name="InitialVal"></param>
            <param name="Mesh"></param>
            <param name="tol"></param>
            <param name="hmin"></param>
            <param name="hmax"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.Optimization">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Optimization.Newton(System.Func{NumSharp.Vector,System.Double},NumSharp.Vector,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="x"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Optimization.QuasiNewton(System.Func{NumSharp.Vector,System.Double},NumSharp.Vector,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="x"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Optimization.CGNewton(System.Func{NumSharp.Vector,System.Double},NumSharp.Vector,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="x"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.UpdateStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.UpdateStrategy.LineSearch">
            <summary>
            
            </summary>
        </member>
        <member name="F:NumSharp.UpdateStrategy.TrustRegion">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.OptimizationAndSolverSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.OptimizationAndSolverSettings.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.MaxIteration">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.Delta">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.rho">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.tau">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.CustomJac">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.Eps">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.TrustRegionRadius">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.UpdateMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.MatrixModificationStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.WolfeConstants">
            <summary>
            
            </summary>
        </member>
        <member name="P:NumSharp.OptimizationAndSolverSettings.Tol">
            <summary>
            
            </summary>
        </member>
        <member name="T:NumSharp.Polynomial">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Polynomial.polyEval(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="Coeffs"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.polyEval2(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="Coeffs"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.PolyDeflate(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="coeffs"></param>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.PolyRoots(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Coeffs"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.PolyRoots2(NumSharp.Vector,NumSharp.Matrix@)">
            <summary>
            
            </summary>
            <param name="Coeffs"></param>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.LegendrePolynomial(System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.LegendreNodesWeights(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.LaguerrePolynomial(System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.LaguerreNodesWeights(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.ChebyshevPolynonial(System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.ChebyshevRoots(System.Int32)">
            <summary>
            
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.HermitePolynomial(System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Polynomial.HermiteNodesWeights(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.Solvers.AddingMultipleOfIdentityMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Solvers.AddingMultipleOfIdentityMatrix.SPD(NumSharp.Matrix)">
            <summary>
            
            </summary>
            <param name="Nspd"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.Solvers.LinearSolvers">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.SolveLU(NumSharp.Matrix,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.SolveLDLt(NumSharp.Matrix,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.SolveQR(NumSharp.Matrix,NumSharp.Vector,NumSharp.QRFactorizationMethod)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <param name="QRScheme"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.SolveChol(NumSharp.Matrix,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.SolveTriad(NumSharp.Matrix,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.Solve(NumSharp.Matrix,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.SolveSVD(NumSharp.Matrix,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.LeastSquare(NumSharp.Matrix,NumSharp.Vector,NumSharp.QRFactorizationMethod)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <param name="QRScheme"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.NullSpace(NumSharp.Matrix,NumSharp.Vector,System.Int32,NumSharp.QRFactorizationMethod,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="InitialGuess"></param>
            <param name="specIndex"></param>
            <param name="qrScheme"></param>
            <param name="SpecificationVar"></param>
            <param name="normalized"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.Gauss_Seidel(NumSharp.Matrix,NumSharp.Vector,NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="x0"></param>
            <param name="b"></param>
            <param name="tol"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.LinearSolvers.Jacobi(NumSharp.Matrix,NumSharp.Vector,NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <param name="x0"></param>
            <param name="tol"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NumSharp.Solvers.NonLinearSolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Solvers.NonLinearSolver.Newton(System.Func{NumSharp.Vector,NumSharp.Vector},NumSharp.Vector,System.Double,System.Int32,System.Func{NumSharp.Vector,NumSharp.Matrix})">
            <summary>
            
            </summary>
            <param name="Fun"></param>
            <param name="InitialGuess"></param>
            <param name="tol"></param>
            <param name="MaxIter"></param>
            <param name="CusJac"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.NonLinearSolver.ModifiedNewton(System.Func{NumSharp.Vector,NumSharp.Vector},NumSharp.Vector,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            
            </summary>
            <param name="Fun"></param>
            <param name="InitialGuess"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.NonLinearSolver.QuasiNewton(System.Func{NumSharp.Vector,NumSharp.Vector},NumSharp.Vector,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            
            </summary>
            <param name="Fun"></param>
            <param name="InitialGuess"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.NonLinearSolver.NewtonFzero(System.Func{System.Double,System.Double},System.Double,NumSharp.OptimizationAndSolverSettings)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="initialGues"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Solvers.NonLinearSolver.BrentFzero(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Fun"></param>
            <param name="Lb"></param>
            <param name="Ub"></param>
            <param name="Tol"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Solvers.NonLinearSolver.Bisectfzero(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.SpecialFunctions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.SpecialFunctions.Factorial(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.SpecialFunctions.Gamma(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.SpecialFunctions.Combination(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.SpecialFunctions.Permutation(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.SpecialFunctions.Beta(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NumSharp.Spline">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Spline.CubicSpline1(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Spline.CubicSpline(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.Vector">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Vector.#ctor(System.Double[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Func{System.Double,System.Double})">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <param name="fun"></param>
        </member>
        <member name="M:NumSharp.Vector.#ctor(System.Collections.Generic.List{System.Double})">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.#ctor">
            <summary>
            Create an empty vector
            You can use the <see cref="M:NumSharp.Vector.Add(System.Double)" />Method to add elements
            </summary>
        </member>
        <member name="M:NumSharp.Vector.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="dim"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Explicit(NumSharp.Vector)~System.Double[]">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Implicit(System.Double)~NumSharp.Vector">
            <summary>
            
            </summary>
            <param name="scaler"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Explicit(NumSharp.Vector)~System.Double">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Implicit(NumSharp.Vector)~System.Collections.Generic.List{System.Double}">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Implicit(System.Collections.Generic.List{System.Double})~NumSharp.Vector">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Implicit(System.Double[])~NumSharp.Vector">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Explicit(System.Double[0:,0:])~NumSharp.Vector">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Implicit(NumSharp.Vector)~System.Double[0:,0:]">
            <summary>
            
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:NumSharp.Vector.op_Equality(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Inequality(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Addition(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="V2"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_OnesComplement(NumSharp.Vector)">
            <summary>
            transpose row vector to column vector and vice versa
            </summary>
            <param name="V"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Addition(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Addition(System.Double,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Scalar"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Subtraction(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="V2"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Subtraction(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Subtraction(System.Double,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Scalar"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_UnaryNegation(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Multiply(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Multiply(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Multiply(System.Double,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Scalar"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Division(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="V2"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Division(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_Division(System.Double,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Scalar"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.op_ExclusiveOr(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="V"></param>
            <param name="exponent"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Vector.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Vector.Item(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="vectorType"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Mean">
            <summary>
            calculate the mean value of the vector components
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Variance">
            <summary>
            calculate the variance of the vector components
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.STD">
            <summary>
            calculate the standard deviation of the vector components
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Normalized">
            <summary>
            normalizes the vector,such that the vector length is unity
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Concat(NumSharp.Vector[])">
            <summary>
            concatenate the vectors,essentially flattening them into a single vector
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Prepend(System.Double)">
            <summary>
            Insert the value at the top of the vector, at index 0
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Append(System.Double)">
            <summary>
            Add item to the end of the vector <see cref="M:NumSharp.Vector.Add(System.Double)"/>
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Get``1(System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Transform(System.Func{System.Double,System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:NumSharp.Vector.Get``1(NumSharp.Vector,System.Func{NumSharp.Vector,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.NotAVector">
            <summary>
            return true if any component of the vector contains NAN of infinity
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.IndexOf(System.Double)">
            <summary>
            return the index of the vector component or -1 if the component is not in the vector
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.GetRowVector">
            <summary>
            return the row vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.GetRowVector(NumSharp.Vector)">
            <summary>
            return the row vector of V
            </summary>
            <param name="V"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.CopyTo(NumSharp.Vector)">
            <summary>
            return a column vector
            </summary>
            <param name="vect"></param>
        </member>
        <member name="M:NumSharp.Vector.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Dot(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            Calculates the inner product of two vectors
            </summary>
            <param name="V1"> A ROW VECTOR</param>
            <param name="V2"> A Column vector</param>
            <returns> returns a double</returns>
        </member>
        <member name="M:NumSharp.Vector.Dot(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="V"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Max">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Min">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Swap(System.Double@,System.Double@)">
            <summary>
            exchange two items
            </summary>
            <param name="Item1"></param>
            <param name="Item2"></param>
        </member>
        <member name="M:NumSharp.Vector.Addition(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            perform vector additrion
            </summary>
            <param name="V1"></param>
            <param name="V2"></param>
            <returns> returns a column vector</returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Vector.Addition(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="V1"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Addition(System.Double,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Scalar"></param>
            <param name="V1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Subtraction(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            subtract two vectors
            </summary>
            <param name="V1"></param>
            <param name="V2"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Vector.Subtraction(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="V1"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Subtraction(System.Double,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Scalar"></param>
            <param name="V1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Multiplication(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="V1"></param>
            <param name="V2"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Vector.Multiplication(NumSharp.Vector,System.Double)">
            <summary>
            scalar vector multiplication
            </summary>
            <param name="V1"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Multiplication(System.Double,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Scalar"></param>
            <param name="V1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.TwDivision(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            termwise division
            </summary>
            <param name="V1"></param>
            <param name="V2"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Vector.TwDivision(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="V1"></param>
            <param name="Scalar"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.TwDivision(System.Double,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="Scalar"></param>
            <param name="V1"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.FirstNth(System.Int32)">
            <summary>
            return the first nth entries
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Replace(System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <param name="index"></param>
        </member>
        <member name="M:NumSharp.Vector.Replace(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <param name="newval"></param>
        </member>
        <member name="M:NumSharp.Vector.LastNth(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.ggg(System.Func{System.Double,System.Double})">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Pow(System.Double)">
            <summary>
            
            </summary>
            <param name="exponent"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Pow(NumSharp.Vector,System.Double)">
            <summary>
            
            </summary>
            <param name="V"></param>
            <param name="exponent"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Ones(System.Int32)">
            <summary>
            
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Zeros(System.Int32)">
            <summary>
            
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Norm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Absolute">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Norm_1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Norm_Infinity(System.Int32)">
            <summary>
            
            </summary>
            <param name="infinity"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Norm_Infinity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Insert(System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="Val"></param>
            <param name="position"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Vector.Remove(System.Int32)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NumSharp.Vector.Remove(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NumSharp.Vector.CosTheta(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="V"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.CosTheta(NumSharp.Vector,NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="V1"></param>
            <param name="V2"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Angle(NumSharp.Vector,NumSharp.Vector,System.String)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Angle(NumSharp.Vector,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Reverse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Add(System.Double)">
            <summary>
            
            </summary>
            <param name="Val"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Transform(System.Func{NumSharp.Vector,NumSharp.Vector})">
            <summary>
            
            </summary>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Log(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Log10(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Sin(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Cos(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Exp(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Sqrt(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Tan(NumSharp.Vector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.GetEnumerator">
            <summary>
            An enumerator for iterating through the vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Clone">
            <summary>
            shallow copy of the vector object
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Equals(NumSharp.Vector)">
            <summary>
            equality check 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.Equals(System.Object)">
            <summary>
            implements equality semantic
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Vector.GetHashCode">
            <summary>
            Calculate the hash code of the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Vector.Length">
            <summary>
            vector length, denote number of components in the vector
            </summary>
        </member>
        <member name="P:NumSharp.Vector.ColVector">
            <summary>
            column vector
            </summary>
        </member>
        <member name="P:NumSharp.Vector.RowVector">
            <summary>
            Row vector
            </summary>
        </member>
        <member name="P:NumSharp.Vector.IsColvector">
            <summary>
            Return true if the vector is a row vector
            </summary>
        </member>
    </members>
</doc>
